<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="jwt.sec.auth.jmappers.user.MapperUser">

    <select id="findByUsername" resultType="jwt.sec.auth.domain.user.DbUser"
            parameterType="String">
        SELECT ID,
               USERNAME,
               PASSWORD,
               NAZWISKO,
               IMIE,
               EMAIL,
               LOCKED,
               DATA_OD,
               DATA_DO,
               DATA_HASLA
        from DEMO_user
        where username = #{login}
    </select>

    <select id="getUser" resultType="jwt.sec.auth.domain.user.DbUser"
            parameterType="Long">
        SELECT ID,
               USERNAME,
               PASSWORD,
               NAZWISKO,
               IMIE,
               EMAIL,
               LOCKED,
               DATA_OD,
               DATA_DO,
               DATA_HASLA
        from DEMO_user
        where id = #{id}
    </select>

    <select id="filteredUsers" resultType="jwt.sec.auth.domain.user.DbUser"
            parameterType="String">
        SELECT ID,
               USERNAME,
               PASSWORD,
               NAZWISKO,
               IMIE,
               EMAIL,
               LOCKED,
               DATA_OD,
               DATA_DO,
               DATA_HASLA
        from DEMO_user
        where username like #{param}
        or nazwisko like #{param}
    </select>

    <select id="getUserRoles" resultType="DbUsrRoles" parameterType="Long">
        select p.id, p.ID_USER, r.ID_ROLE, r.CODE_ROLE, r.DESCR, p.DATE_FROM, p.DATE_TO
        from DEMO_roles r, DEMO_user_role p
        where r.ID_ROLE = p.ID_ROLE
          and p.ID_USER = #{idusr}
        order by 5, 6
    </select>

    <select id="getUsrRole" resultType="String" parameterType="Long">
        select rr.code_role
        from DEMO_user_role ur,
             DEMO_roles rr
        where ur.id_role
            = rr.id_role
          and ur.id_user = #{idusr}
    </select>
    
    <update id="saveUser"  parameterType="DbUser">
    	UPDATE DEMO_USER
		SET    USERNAME   = #{username},
		       PASSWORD   = #{password},
		       NAZWISKO   = #{nazwisko},
		       IMIE       = #{imie},
		       LOCKED     = #{locked},
		       EMAIL      = #{email, jdbcType=CHAR, javaType=java.lang.String},
		       DATA_OD    = #{data_od, jdbcType=DATE, javaType=java.sql.Timestamp},
		       DATA_DO    = #{data_do, jdbcType=DATE, javaType=java.sql.Timestamp},
		       DATA_HASLA = #{data_hasla, jdbcType=DATE, javaType=java.sql.Timestamp}
        WHERE ID = #{id}		       
    </update>

    <update id="updUserRole"  parameterType="DbUsrRoles">
        UPDATE DEMO_USER_ROLE
        SET    ID_ROLE   = #{id_role},
               DATE_FROM = #{date_from, jdbcType=DATE, javaType=java.sql.Timestamp},
               DATE_TO   = #{date_to, jdbcType=DATE, javaType=java.sql.Timestamp}
        WHERE ID = #{id}
    </update>


    <insert id="insUser" parameterType="DbUser" >
        INSERT INTO DEMO_USER (
        USERNAME, PASSWORD, NAZWISKO, IMIE, EMAIL, LOCKED, DATA_OD, DATA_DO, DATA_HASLA)
        VALUES (#{username}, #{password}, #{nazwisko}, #{imie}, #{email}, #{locked},
                #{data_od, jdbcType=DATE, javaType=java.sql.Timestamp},
                #{data_do, jdbcType=DATE, javaType=java.sql.Timestamp},
                #{data_hasla, jdbcType=DATE, javaType=java.sql.Timestamp} )
    </insert>

    <insert id="insUserRole" parameterType="DbUsrRoles" >
        INSERT INTO DEMO_USER_ROLE (
        ID_USER, ID_ROLE, DATE_FROM, DATE_TO)
        VALUES ( #{id_user},
                 #{id_role},
                 #{date_from, jdbcType=DATE, javaType=java.sql.Timestamp},
                 #{date_to, jdbcType=DATE, javaType=java.sql.Timestamp} )
    </insert>

    <select id="getProducts" resultType="jwt.sec.auth.domains.DbProduct"
            parameterType="jwt.sec.auth.domains.DbProduct">
        SELECT
        PRODUCT_ID, PRODUCT_NAME, PRODUCT_DESCRIPTION,
        CATEGORY, PRODUCT_AVAIL, LIST_PRICE,
        PRODUCT_IMAGE, MIMETYPE, FILENAME,
        IMAGE_LAST_UPDATE, TAGS
        FROM DEMO_PRODUCT_INFO where PRODUCT_ID is not null
        <if test="product_name != null" >
            and ( upper(PRODUCT_NAME) like '%'||upper(#{product_name})||'%'
            or upper(PRODUCT_DESCRIPTION) like '%'||upper(#{product_name})||'%' )
        </if>
        <if test="product_id != 0" >
            and PRODUCT_ID = #{product_id}
        </if>
        ORDER BY 1
    </select>


    <insert id="insProduct" parameterType="jwt.sec.auth.domains.DbProduct" >
        INSERT INTO DEMO_PRODUCT_INFO (
            PRODUCT_ID, PRODUCT_NAME, PRODUCT_DESCRIPTION,
            CATEGORY, PRODUCT_AVAIL, LIST_PRICE,
            PRODUCT_IMAGE, MIMETYPE, FILENAME,
            IMAGE_LAST_UPDATE)
        VALUES (null,
                #{product_name},
                #{product_description},
                #{category},
                #{product_avail},
                #{list_price, jdbcType=DOUBLE},
                #{product_image, jdbcType=BLOB},
                #{mimetype},
                #{filename},
                #{image_last_update, jdbcType=DATE, javaType=java.sql.Timestamp} )
    </insert>

    <update id="updProduct"  parameterType="jwt.sec.auth.domains.DbProduct">
        UPDATE DEMO_PRODUCT_INFO
        SET    PRODUCT_NAME        = #{product_name},
               PRODUCT_DESCRIPTION = #{product_description},
               CATEGORY            = #{category},
               PRODUCT_AVAIL       = #{product_avail},
               LIST_PRICE          = #{list_price, jdbcType=DOUBLE},
               PRODUCT_IMAGE       = #{product_image, jdbcType=BLOB},
               MIMETYPE            = #{mimetype},
               FILENAME            = #{filename},
               IMAGE_LAST_UPDATE   = #{image_last_update, jdbcType=DATE, javaType=java.sql.Timestamp}
        WHERE  PRODUCT_ID = #{product_id}
    </update>

    <select id="getOrders" resultType="jwt.sec.auth.domains.DbOrder"
            parameterType="jwt.sec.auth.domains.DbOrder">
        SELECT
            ORDER_ID, ord.CUSTOMER_ID, ORDER_TOTAL,
            ORDER_TIMESTAMP, USER_NAME, ord.TAGS,
            CUST_LAST_NAME||' '||CUST_FIRST_NAME CUSTOMER
        FROM DEMO_ORDERS ord, DEMO_CUSTOMERS cust
        WHERE ord.CUSTOMER_ID = cust.CUSTOMER_ID
        <if test="order_id != 0" >
            and ORDER_ID= #{order_id}
        </if>
        <if test="customer != null" >
            and upper(CUST_LAST_NAME||' '||CUST_FIRST_NAME) like '%'||upper(#{customer})||'%'
        </if>
        <if test="order_timestamp != null" >
            and ORDER_TIMESTAMP >= #{order_timestamp}
        </if>
        ORDER BY 1
    </select>


    <select id="getOrderItems" resultType="jwt.sec.auth.domains.DbOrderItem"
            parameterType="jwt.sec.auth.domains.DbOrderItem">
        SELECT
        ORDER_ITEM_ID, ORDER_ID, DEMO_ORDER_ITEMS.PRODUCT_ID,
        UNIT_PRICE, QUANTITY, PRODUCT_NAME, PRODUCT_DESCRIPTION, LIST_PRICE,
        UNIT_PRICE * QUANTITY ITEM_VALUE
        FROM DEMO_ORDER_ITEMS, DEMO_PRODUCT_INFO
        where DEMO_ORDER_ITEMS.PRODUCT_ID = DEMO_PRODUCT_INFO.PRODUCT_ID
        <if test="order_id != 0" >
            and ORDER_ID= #{order_id}
        </if>
        ORDER BY 1
    </select>
    
    <select id="getCustomers" resultType="jwt.sec.auth.domains.DbCustomer"
            parameterType="jwt.sec.auth.domains.DbCustomer">
        SELECT
        CUSTOMER_ID, CUST_FIRST_NAME, CUST_LAST_NAME,
        CUST_STREET_ADDRESS1, CUST_STREET_ADDRESS2, CUST_CITY,
        CUST_STATE, CUST_POSTAL_CODE, CUST_EMAIL,
        PHONE_NUMBER1, PHONE_NUMBER2, URL, STATE_NAME STATE_DESCR
        FROM DEMO_CUSTOMERS, DEMO_STATES
        WHERE ST = CUST_STATE
        <if test="customer_id != 0" >
            and CUSTOMER_ID= #{customer_id}
        </if>
        <if test="cust_last_name != null" >
            and upper(CUST_LAST_NAME||' '||CUST_FIRST_NAME) like '%'||upper(#{cust_last_name})||'%'
        </if>
        ORDER BY 1
    </select>

</mapper>